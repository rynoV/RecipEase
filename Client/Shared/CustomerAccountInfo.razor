@using RecipEase.Shared.Models
@using RecipEase.Shared.Models.Api
@using Meal = RecipEase.Shared.Models.Meal
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net
@using RecipEase.Client.Shared.Util
@using RecipEase.Shared
@inject HttpClient Http

<h2>Account Info</h2>

@if (_error != null)
{
    <div class="container alert-danger">@_error</div>
}
@if (_success != null)
{
    <div class="container alert-success">@_success</div>
}
@if (_customer != null)
{
    <EditForm
        Model="@_customer"
        OnValidSubmit="@HandleValidSubmit"
        class="w-50">

        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText
                id="name" class="form-control"
                @bind-Value="_customer.CustomerName"/>
        </div>
        <div class="form-group">
            <label for="age">Age</label>
            <InputNumber
                id="age" class="form-control"
                @bind-Value="_customer.Age"/>
        </div>
        <div class="form-group">
            <label for="weight">Weight</label>
            <InputNumber
                id="weight" class="form-control"
                @bind-Value="_customer.Weight"/>
        </div>
        <div class="form-group">
            <label for="meal">Favourite meal</label>
            <InputSelect id="meal" class="form-control" @bind-Value="_customer.FavMeal">
                @foreach (var meal in Enum.GetValues(typeof(Meal)))
                {
                    <option value="@meal">@meal</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Update Profile</button>
        </div>
        <p>Want to change your email or password, or delete your account? <a href="/Identity/Account/Manage">Click here</a>.</p>

    </EditForm>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private ApiCustomer _customer = null;
    private string _error = null;
    private string _success = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userId = await Auth.GetAuthenticatedUser(AuthenticationStateTask);
            if (userId != null)
            {
                var uriBuilder = new UriBuilder(Http.BaseAddress)
                {
                    Path = "api/Customer",
                    Query = $"userId={userId}"
                };
                
                _customer = await Http.GetFromJsonAsync<ApiCustomer>(uriBuilder.ToString());
            }
        }
        catch (AccessTokenNotAvailableException e)
        {
            e.Redirect();
        }
        catch (HttpRequestException e)
        {
            _error = "An error occurred loading your account.";
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!string.IsNullOrEmpty(_customer?.UserId))
        {
            var response = await Http.PutAsJsonAsync($"api/Customer/{_customer.UserId}", _customer);
            if (!response.IsSuccessStatusCode)
            {
                _error = "An error occurred updating your account";
            }
            else
            {
                _success = "Account updated!";
            }
        }
    }

}
@using RecipEase.Shared.Models.Api
@using RecipEase.Shared.ApiResponses
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using RecipEase.Client.Shared.Util
@inject HttpClient Http

@foreach (var error in Errors)
{
    <div class="alert-danger">@error</div>
}
@if (Ingredients != null)
{
    <ul class="list-group list-group-flush mb-4">
        <IngredientListView
            Ingredients="@Ingredients"
            SaveHandler="@SaveHandler">
        </IngredientListView>
    </ul>
}


@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    /// Persists the deletion of an ingredient. Receives the user id and the ingredient as parameters.
    [Parameter]
    public Func<string, QuantifiedIngredient, Task<HttpResponseMessage>> DeleteIngredient { get; set; }

    /// Persists the adding of an ingredient. Receives the user id and the ingredient as parameters.
    [Parameter]
    public Func<string, QuantifiedIngredient, Task<HttpResponseMessage>> AddIngredient { get; set; }

    /// Persists the updating of an ingredient. Receives the user id and the ingredient as parameters.
    [Parameter]
    public Func<string, QuantifiedIngredient, Task<HttpResponseMessage>> UpdateIngredient { get; set; }

    /// The list of ingredients to be edited.
    [Parameter]
    public List<QuantifiedIngredient> IngredientList
    {
        set
        {
            Ingredients = value?.ToDictionary(ing => ing.Ingredient.Name, ing => ing);
            if (Ingredients != null)
            {
                SetOriginalIngredients(Ingredients);
            }
        }
    }

    private Dictionary<string, QuantifiedIngredient> Ingredients { get; set; }
    private Dictionary<string, QuantifiedIngredient> OriginalIngredients { get; set; }

    private List<string> Errors { get; } = new();

    private void SetOriginalIngredients(Dictionary<string, QuantifiedIngredient> ingredients)
    {
        OriginalIngredients = ingredients.ToDictionary(kvp => kvp.Key, kvp => kvp.Value.GetCopy());
    }

    private async Task SaveHandler(MouseEventArgs e)
    {
        var updatedKeys = Ingredients.Keys;
        var originalKeys = OriginalIngredients.Keys;

        var removedKeys = originalKeys.Except(updatedKeys).ToHashSet();
        var addedKeys = updatedKeys.Except(originalKeys).ToHashSet();
        var remainingKeys = updatedKeys.Except(removedKeys.Union(addedKeys)).ToHashSet();

        var userId = await Auth.GetAuthenticatedUser(AuthenticationStateTask);
        if (userId != null)
        {
            Errors.Clear();

            foreach (var (key, removedIngredient) in IterIngredientsByKeys(OriginalIngredients, removedKeys))
            {
                var response = await DeleteIngredient(userId, removedIngredient);

                if (!response.IsSuccessStatusCode)
                {
                    Errors.Add($"Could not remove ingredient {removedIngredient.Ingredient.Name}.");
                    Ingredients.Add(key, removedIngredient);
                }
            }

            foreach (var (key, addedIngredient) in IterIngredientsByKeys(Ingredients, addedKeys))
            {
                var response = await AddIngredient(userId, addedIngredient);
                if (!response.IsSuccessStatusCode)
                {
                    Errors.Add($"Could not add ingredient {addedIngredient.Ingredient.Name}.");
                    Ingredients.Remove(key);
                }
            }

            foreach (var (key, remainingIngredient) in IterIngredientsByKeys(OriginalIngredients, remainingKeys))
            {
                var updatedIngredient = Ingredients[key];
                if (remainingIngredient.Equals(updatedIngredient)) continue;

                var response = await UpdateIngredient(userId, updatedIngredient);
                if (!response.IsSuccessStatusCode)
                {
                    Errors.Add($"Could not update ingredient {remainingIngredient.Ingredient.Name}.");
                }
            }
        }

        SetOriginalIngredients(Ingredients);
    }

    private IEnumerable<(string key, QuantifiedIngredient)> IterIngredientsByKeys(Dictionary<string, QuantifiedIngredient>
        ingredients, HashSet<string> keys)
    {
        return keys.Select(key => (key, ingredients[key]));
    }

}
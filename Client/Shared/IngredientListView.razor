@using RecipEase.Shared.ApiResponses
@using RecipEase.Shared.Models.Api
@using RecipEase.Shared.Models
@using RecipEase.Client.Shared.Util
@using System.Linq.Dynamic.Core
@inject IHttpClientFactory ClientFactory

@if (Ingredients != null)
{
    @if (!ReadOnly && ShowSave)
    {
        <button @onclick="SaveHandler" class="btn btn-primary">
            Save Changes
        </button>
    }
    @if (ShowNewIngredient)
    {
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle"
                    type="button"
                    id="add-ingredient-dropdown"
                    data-bs-toggle="dropdown"
                    aria-expanded="false">
                + Add Ingredient
            </button>
            <IngredientAddDropdown
                DropdownLabel="add-ingredient-dropdown"
                OnAdd="@OnNewIngredient">
            </IngredientAddDropdown>
        </div>
    }
    @foreach (var (key, quantifiedIngredient) in Ingredients)
    {
        <li class="list-group-item d-flex justify-content-between align-items-center @LiClasses" @key="key">
            <span>@quantifiedIngredient.Ingredient.Name</span>
            <div class="d-inline-flex">
                <input
                    disabled="@(!QuantityEditable)"
                    type="number"
                    class="form-control w-25"
                    placeholder="Amount"
                    @bind=@quantifiedIngredient.Quantity/>
                <UnitSelect OnUnitChange="@ConvertQuantity" Ingredient="@quantifiedIngredient" UnitEditable="@UnitEditable"/>
            </div>
            <span class="badge badge-primary badge-pill">@(quantifiedIngredient.Ingredient.Rarity?.ToString())</span>
            <IngredientSuppliersButton IngredientName="@quantifiedIngredient.Ingredient.Name"></IngredientSuppliersButton>
            @if (ShowDelete)
            {
                <TrashButton ClickHandler="@GetDeleteHandler(key)"></TrashButton>
            }
            @if (ShowAdd)
            {
                <AddButton ClickHandler="@GetAddHandler(key)"></AddButton>
            }
        </li>
    }
}

@code
{
    /// Ingredients to be shown
    [Parameter]
    public Dictionary<(string, string), QuantifiedIngredient> Ingredients { get; set; }

    /// Handler to be called when the user saves their changes
    [Parameter]
    public EventCallback<MouseEventArgs> SaveHandler { get; set; }

    /// Controls whether the quantity of each ingredient should be editable
    [Parameter]
    public bool QuantityEditable { get; set; } = true;

    /// Controls whether the unit of each ingredient should be editable
    [Parameter]
    public bool UnitEditable { get; set; } = false;

    /// Controls whether the delete button should be shown next to each ingredient.
    [Parameter]
    public bool ShowDelete { get; set; } = true;

    /// Controls whether the add button should be shown next to each ingredient.
    [Parameter]
    public bool ShowAdd { get; set; }

    /// Controls whether the new ingredient button should be shown with the list.
    [Parameter]
    public bool ShowNewIngredient { get; set; } = true;

    /// Controls whether the save button should be shown with the list.
    [Parameter]
    public bool ShowSave { get; set; } = true;

    /// Handler to be called when the delete button is pressed on an item. Gets passed the ingredient key. If this is
    /// not provided, by default the ingredient will be removed on click.
    [Parameter]
    public Action<(string, string)> OnDelete { get; set; }

    /// Handler to be called when the add button is pressed on an item. Gets passed the ingredient key. If this is
    /// not provided, by default nothing will happen.
    [Parameter]
    public Action<(string, string)> OnAdd { get; set; }

    private bool _readOnly;

    /// Set to true if the ingredient list should not allow editing. Temporary unit conversions will be enabled with this property.
    [Parameter]
    public bool ReadOnly
    {
        get => _readOnly;
        set
        {
            _readOnly = value;
            if (!value) return;
            QuantityEditable = false;
            UnitEditable = true;
            ShowNewIngredient = false;
            ShowDelete = false;
            ShowSave = false;
        }
    }

    [Parameter]
    public string LiClasses { get; set; }

    private Dictionary<UnitType, List<ApiUnit>> Units { get; set; }

    private async Task ConvertQuantity((string, string) ingredientKey, ApiUnit oldUnit, ApiUnit newUnit)
    {
    // We don't do any conversions if the user is allowed to edit the quantity themselves
        if (QuantityEditable)
        {
            return;
        }

        if (oldUnit.Name == newUnit.Name)
        {
            return;
        }

        var client = Auth.GetNoAuthHttpClient(ClientFactory);
        var uriBuilder = new UriBuilder(client.BaseAddress)
        {
            Path = "api/UnitConversion",
            Query = $"convertsToUnitName={newUnit.Name}&convertsFromUnitName={oldUnit.Name}"
        };
        var conversion = await client.GetFromJsonAsync<ApiUnitConversion>(uriBuilder.ToString());
        if (conversion != null)
        {
            var ingredient = Ingredients[ingredientKey];
            // Remove the old keys with the old units
            foreach (var key in Ingredients.Keys.Where(key => key.Item1 == ingredientKey.Item1))
            {
                Ingredients.Remove(key);
            }
            // Replace with a new key for the new unit
            Ingredients.Add((ingredient.Ingredient.Name, newUnit.Name), ingredient);
            
            if (oldUnit.UnitType == newUnit.UnitType)
            {
                ingredient.Quantity *= conversion.Ratio;
            }
            else
            {
                switch (oldUnit.UnitType)
                {
                    case UnitType.Mass:
                        ingredient.Quantity *= ingredient.Ingredient.WeightToVolRatio * conversion.Ratio;
                        break;
                    case UnitType.Volume:
                        ingredient.Quantity *= 1 / ingredient.Ingredient.WeightToVolRatio * conversion.Ratio;
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            }
            StateHasChanged();
        }
    }

    private void DefaultDeleteHandler((string, string) key)
    {
        Ingredients.Remove(key);
        StateHasChanged();
    }

    private EventCallback<MouseEventArgs> GetAddHandler((string, string) ingredientKey)
    {
        void AddHandler(object _)
        {
            if (OnAdd != null)
            {
                OnAdd(ingredientKey);
            }
        }

        return GetEventCallback(AddHandler);
    }

    private EventCallback<MouseEventArgs> GetDeleteHandler((string, string) ingredientKey)
    {
        void DeleteHandler(object _)
        {
            if (OnDelete != null)
            {
                OnDelete(ingredientKey);
            }
            else
            {
                DefaultDeleteHandler(ingredientKey);
            }
        }

        return GetEventCallback(DeleteHandler);
    }

    private EventCallback<MouseEventArgs> GetEventCallback(Action<object> handler)
    {
        return new(this, handler);
    }

    private void OnNewIngredient(QuantifiedIngredient newIngredient)
    {
        var key = (newIngredient.Ingredient.Name, newIngredient.Unit.Name);
        if (Ingredients.Keys.All(k => k.Item1 != key.Item1))
        {
            Ingredients.Add(key, newIngredient);
            StateHasChanged();
        }
    }
}
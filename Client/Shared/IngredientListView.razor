@using RecipEase.Shared.ApiResponses
@using RecipEase.Shared.Models.Api

@if (Ingredients != null)
{
    <button class="btn btn-success" @onclick="AddHandler">+ Add Ingredient</button>
    <ul class="list-group list-group-flush mb-4">
        @foreach (var (key, quantifiedIngredient) in Ingredients)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center" @key="key">
                <span>@quantifiedIngredient.Ingredient.Name</span>
                <div class="d-inline-flex">
                    <input
                        type="number"
                        class="form-control w-25"
                        placeholder="Amount"
                        @bind=@quantifiedIngredient.Quantity/>
                    <select class="form-control w-50">
                        <option selected>@quantifiedIngredient.Unit.Name</option>
                    </select>
                </div>
                <span class="badge badge-primary badge-pill">@(quantifiedIngredient.Ingredient.Rarity?.ToString())</span>
                @if (ShowDelete)
                {
                    <TrashButton ClickHandler="@GetDeleteHandler(key)"></TrashButton>
                }
            </li>
        }
    </ul>
    <button @onclick="SaveHandler" class="btn btn-primary">
        Save Changes
    </button>
}

@code
{
    /// Ingredients to be shown
    [Parameter]
    public Dictionary<string, QuantifiedIngredient> Ingredients { get; set; }

    /// Handler to be called when the user saves their changes
    [Parameter]
    public EventCallback<MouseEventArgs> SaveHandler { get; set; }

    /// Controls whether the delete button should be shown next to each ingredient.
    [Parameter]
    public bool ShowDelete { get; set; } = true;

    /// Handler to be called when the delete button is pressed on an item. Gets passed the ingredient key. If this is
    /// not provided, by default the ingredient will be removed on click.
    [Parameter]
    public Action<string> OnDelete { get; set; }

    private void DefaultDeleteHandler(string key)
    {
        Ingredients.Remove(key);
    }

    private EventCallback<MouseEventArgs> GetDeleteHandler(string ingredientKey)
    {
        void DeleteHandler(object _)
        {
            if (OnDelete != null)
            {
                OnDelete(ingredientKey);
            }
            else
            {
                DefaultDeleteHandler(ingredientKey);
            }
        }

        return new EventCallback<MouseEventArgs>(this, (Action<object>) DeleteHandler);
    }

    private void AddHandler(MouseEventArgs args)
    {
        var quantifiedIngredient = new QuantifiedIngredient()
        {
            Ingredient = new ApiIngredient()
            {
                Name = "Flour",
                Rarity = Rarity.Common,
                WeightToVolRatio = 0.5
            },
            Quantity = 10,
            Unit = new ApiUnit()
            {
                Name = "Grams",
                Symbol = "g",
                UnitType = UnitType.Mass
            }
        };

        Ingredients.Add(quantifiedIngredient.Ingredient.Name, quantifiedIngredient);
    }
}
@using RecipEase.Shared.Models.Api
@using RecipEase.Shared.ApiResponses
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using RecipEase.Client.Shared.Util
@inject HttpClient Http

<h2>Supplied Ingredients</h2>
<IngredientListEditor
    IngredientList="@Ingredients"
    DeleteIngredient="@DeleteIngredient"
    AddIngredient="@AddIngredient"
    UpdateIngredient="@UpdateIngredient"/>

@code {

        private const string ApiSuppliesEndpoint = "api/Supplies";

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private List<QuantifiedIngredient> Ingredients { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userId = await Auth.GetAuthenticatedUser(AuthenticationStateTask);
            if (userId != null)
            {
                var uriBuilder = new UriBuilder(Http.BaseAddress)
                {
                    Path = ApiSuppliesEndpoint,
                    Query = $"userId={userId}"
                };

                Ingredients = await Http.GetFromJsonAsync<List<QuantifiedIngredient>>(uriBuilder.ToString());
            }
        }
        catch (AccessTokenNotAvailableException e)
        {
            e.Redirect();
        }
    }

    private async Task<HttpResponseMessage> DeleteIngredient(string userId, QuantifiedIngredient removedIngredient)
    {
        var removedApiSupplies = removedIngredient.ToApiSupplies(userId);
        var uriBuilder = new UriBuilder(Http.BaseAddress)
        {
            Path = ApiSuppliesEndpoint
        };
        var request = new HttpRequestMessage
        {
            Content = JsonContent.Create(removedApiSupplies),
            Method = HttpMethod.Delete,
            RequestUri = uriBuilder.Uri
        };
        return await Http.SendAsync(request);
    }

    private async Task<HttpResponseMessage> AddIngredient(string userId, QuantifiedIngredient addedIngredient)
    {
        var newApiSupplies = addedIngredient.ToApiSupplies(userId);
        return await Http.PostAsJsonAsync(ApiSuppliesEndpoint, newApiSupplies);
    }

    private async Task<HttpResponseMessage> UpdateIngredient(string userId, QuantifiedIngredient updatedIngredient)
    {
        var uriBuilder = new UriBuilder(Http.BaseAddress)
        {
            Path = ApiSuppliesEndpoint,
            Query = $"userId={userId}"
        };

        return await Http.PutAsJsonAsync(uriBuilder.ToString(), updatedIngredient);
    }

}
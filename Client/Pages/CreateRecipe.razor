@using RecipEase.Shared.Models.Api
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using RecipEase.Client.Shared.Util
@using System
@attribute [Authorize]
@inject NavigationManager Navigation
@inject HttpClient Http


@page "/CreateRecipe"


@if (_customer != null)
{
    @if (_error != null)
    {
        <div class="container alert-danger">@_error</div>
    }
    @if (_success != null)
    {
        <div class="container alert-success">@_success</div>
    }


    <EditForm Model="@_rec" OnValidSubmit="@HandleValidSubmit" class="w-50">
        <h2>Create Recipe</h2>
        <p> Recipe With Ease </p>
        <InputText id="name" placeholder="Recipe's Title Goes Here!" class="form-control" @bind-Value="_rec.Name" />
        <br />
        <button type="submit" class="btn btn-primary btn-lg btn-block">Let’s taco ‘bout it.</button>
    </EditForm>
}


@code {
    private ApiRecipe _rec = new ApiRecipe()
            {
                Steps = "",
                Cholesterol = 0,
                Fat = 0,
                Sodium = 0,
                Protein = 0,
                Carbs = 0,
                Calories = 0,
            };
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private string _error = null;
    private string _success = null;
    private ApiCustomer _customer = null;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            string userId = await Auth.GetAuthenticatedUser(AuthenticationStateTask);
            if (userId != null)
            {
                
                var uriBuilder = new UriBuilder(Http.BaseAddress)
                {
                    Path = "api/Customer",
                    Query = $"userId={userId}"
                };
                
                _customer = await Http.GetFromJsonAsync<ApiCustomer>(uriBuilder.ToString());
                    _rec.AuthorId = _customer.UserId;
            }
        }
        catch (AccessTokenNotAvailableException e)
        {
            e.Redirect();
        }
        catch (HttpRequestException e)
        {
            _error = "An error occurred loading your account.";
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!string.IsNullOrEmpty(_rec?.Name))
        {
            var response = await Http.PostAsJsonAsync($"api/Recipe/", _rec);
            if (!response.IsSuccessStatusCode)
            {
                _error = "An error occurred updating your account";
            }
            else
            {
                _success = "Account updated!";
                string a = response.Content.ReadAsStringAsync().Result;
                var createdCollection = await response.Content.ReadFromJsonAsync<ApiRecipe>();
                Navigation.NavigateTo($"/EditRecipe/{createdCollection.Id}");

            }
        }
    }
}

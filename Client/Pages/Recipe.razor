@page "/Recipe/{RawRecipeId}"
@using RecipEase.Shared.Models.Api
@inject HttpClient Http
@using RecipEase.Client.Shared.Util
@using RecipEase.Shared.ApiResponses
@using System.Net
@inject IHttpClientFactory ClientFactory

@if (RecipeViewed != null)
{
    <h1>
        @RecipeViewed.Name
        <RatingAvgCalculated RecipeId="@RecipeId"></RatingAvgCalculated>
    </h1>
    <CascadingValue Value="@RawRecipeId">
        <RateRecipeComponent></RateRecipeComponent>
    </CascadingValue>
    <AddToCollectionButton RecipeId="@RecipeId"></AddToCollectionButton>
    <br>
    <br>
    <h2>Directions</h2>
    <p>
        @RecipeViewed.Steps
    </p>

    <h2>Ingredients</h2>
    @if (IngredientAdded == true)
    {
        <div class="alert alert-success">Ingredient added to <a href="Profile/ShoppingList">your shopping list</a>!</div>
    }
    @if (IngredientAlreadyInShoppingList)
    {
        <div class="alert alert-info">Ingredient already in <a href="Profile/ShoppingList">your shopping list</a>!</div>
    }
    @if (IngredientNotAdded == true)
    {
        <div class="alert alert-danger">Ingredient could not be added. You may need to <a href="authentication/login">login</a>.</div>
    }

    <ul class="list-group list-group-flush mb-4">
        <IngredientListView
            Ingredients="@Ingredients"
            ReadOnly="@true"
            ShowAdd="@true"
            OnAdd="@OnAddIngredientToShoppingList"
            UnitEditable="@true">
        </IngredientListView>
    </ul>

    <h2>Nutrition</h2>
    <ul>
        <li>
            <p> <b>Calories:</b> @RecipeViewed.Calories mg. </p>
        </li>

        <li>
            <p> <b>Carbohydrates:</b> @RecipeViewed.Carbs mg. </p>
        </li>

        <li>
            <p> <b>Protein:</b> @RecipeViewed.Protein mg. </p>
        </li>

        <li>
            <p> <b>Sodium:</b> @RecipeViewed.Sodium mg. </p>
        </li>

        <li>
            <p> <b>Fat:</b> @RecipeViewed.Fat mg. </p>
        </li>

        <li>
            <p> <b>Cholesterol:</b> @RecipeViewed.Cholesterol mg. </p>
        </li>
    </ul>
}



@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public string RawRecipeId { get; set; }

    private int RecipeId => int.Parse(RawRecipeId);

    private ApiRecipe RecipeViewed { get; set; }

    private Dictionary<string, QuantifiedIngredient> Ingredients { get; } = new();

    private bool? _ingredientAdded;

    private bool? IngredientAdded
    {
        get => _ingredientAdded;
        set
        {
            IngredientNotAdded = !value;
            if (value == true)
            {
                IngredientAlreadyInShoppingList = false;
            }
            _ingredientAdded = value;
        }
    }

    private bool IngredientAlreadyInShoppingList { get; set; }

    private bool? IngredientNotAdded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var client = Auth.GetNoAuthHttpClient(ClientFactory);

        var path = $"api/Recipe/{RawRecipeId}";
        RecipeViewed = await client.GetFromJsonAsync<ApiRecipe>(path);
        var uses = await client.GetFromJsonAsync<IEnumerable<ApiUses>>($"api/Uses/{RawRecipeId}");
        if (uses != null)
            foreach (var a in uses)
            {
                var i = await client.GetFromJsonAsync<ApiIngredient>($"api/Ingr/{a.IngrName}");
                var unit = await client.GetFromJsonAsync<ApiUnit>($"api/Unit/{a.UnitName}");
                if (i != null)
                {
                    Ingredients.Add(i.Name, new QuantifiedIngredient()
                    {
                        Ingredient = i,
                        Quantity = a.Quantity,
                        Unit = unit
                    });
                }
            }
    }

    private async void OnAddIngredientToShoppingList(string ingredientName)
    {
        var userId = await Auth.GetAuthenticatedUser(AuthenticationStateTask);
        if (userId == null)
        {
            IngredientAdded = false;
            return;
        }
        var added = Ingredients[ingredientName]?.ToApiIngrInShoppingList(userId);
        if (added == null)
        {
            IngredientAdded = false;
            return;
        }
        var response = await Http.PostAsJsonAsync("api/IngrInShoppingList", added);
        if (response.StatusCode == HttpStatusCode.Conflict)
        {
            IngredientAlreadyInShoppingList = true;
        }
        else
        {
            IngredientAdded = response.IsSuccessStatusCode;
        }
        StateHasChanged();
    }

}
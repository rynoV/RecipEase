@using RecipEase.Shared.Models
@inject HttpClient Http

<p>This component demonstrates fetching and sending data from/to the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th>Humidity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td>@forecast.Humidity</td>
                </tr>
            }
        </tbody>
    </table>
    <EditForm
        Model="@weatherForecast"
        OnValidSubmit="@HandleValidSubmit"
    >
        <DataAnnotationsValidator />
        <ValidationSummary />

        <label for="date">
            Date:
            <InputDate
                id="date"
                @bind-Value="weatherForecast.Date"
                DisplayName="date"
            />
        </label>
        <label for="tempC">Temperature (C):
            <InputNumber
                id="tempC"
                @bind-Value="weatherForecast.TemperatureC"
                DisplayName="temperature"
            />
        </label>
        <label for="summary">Summary:
            <InputText
                id="summary"
                @bind-Value="weatherForecast.Summary"
            />
        </label>

        <label for="hum">Humidity:
            <InputNumber
                id="hum"
                @bind-Value="weatherForecast.Humidity"
            />
        </label>

        <button type="submit">Submit</button>
    </EditForm>
}

@code {
    private WeatherForecast weatherForecast = new WeatherForecast() { Date = DateTime.Now };
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("api/WeatherForecast");
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync<WeatherForecast>("api/WeatherForecast", weatherForecast);
        forecasts = await response.Content.ReadFromJsonAsync<WeatherForecast[]>();
    }
}

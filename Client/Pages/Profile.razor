@page "/Profile"
@page "/Profile/{Section}"
@using Microsoft.AspNetCore.Authorization
@using RecipEase.Shared
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<h1>Profile</h1>

@{
    var section = Section?.ToLower() ?? AccountSection;
}

<ul class="nav nav-tabs mb-4">
    @foreach (var (sectionKey, sectionValues) in SectionTypes)
    {
        <li class="nav-item">
            <a class="nav-link @(section == sectionKey ? "active" : "") " href="/Profile/@sectionKey">@sectionValues.Item1</a>
        </li>
    }
</ul>

<AuthorizeView Roles="@Role.Customer.ToString()">
    @switch (section)
    {
        case AccountSection:
            <CustomerAccountInfo></CustomerAccountInfo>
            break;
        case CollectionsSection:
            <Collections></Collections>
            break;
        case ShoppingListSection:
            <ShoppingList></ShoppingList>
            break;
        case RecipesSection:
            <CustomerRecipes></CustomerRecipes>
            break;
        default:
            <CustomerAccountInfo></CustomerAccountInfo>
            break;
    }
</AuthorizeView>
<AuthorizeView Roles="@Role.Supplier.ToString()">
    @switch (section)
    {
        case AccountSection:
            <SupplierAccountInfo></SupplierAccountInfo>
            break;
        case IngredientsSection:
            <SupplierIngredients></SupplierIngredients>
            break;
        default:
            <SupplierAccountInfo></SupplierAccountInfo>
            break;
    }
</AuthorizeView>

@code
{
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    
    private Role? _currentAccountType;

    private const string AccountSection = "account";
    private const string IngredientsSection = "ingredients";
    private const string CollectionsSection = "collections";
    private const string ShoppingListSection = "shoppinglist";
    private const string RecipesSection = "recipes";
    
    private Dictionary<string, Tuple<string>> SectionTypes
    {
        get
        {
            switch (_currentAccountType)
            {
                case Role.Customer:
                    return new Dictionary<string, Tuple<string>>()
                    {
                        {AccountSection, new Tuple<string>("Account Info")},
                        {CollectionsSection, new Tuple<string>("Collections")},
                        {ShoppingListSection, new Tuple<string>("Shopping List")},
                        {RecipesSection, new Tuple<string>("Your Recipes")},
                    };
                case Role.Supplier:
                    return new Dictionary<string, Tuple<string>>()
                    {
                        {AccountSection, new Tuple<string>("Account Info")},
                        {IngredientsSection, new Tuple<string>("Ingredients")},
                    };
                default:
                    return new Dictionary<string, Tuple<string>>();
            }
        }
    }

    [Parameter]
    public string Section { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateTask;
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            SetCurrentAccountType(user);
        }
    }

    private void SetCurrentAccountType(ClaimsPrincipal user)
    {
        if (user.IsInRole(Role.Customer.ToString()))
        {
            _currentAccountType = Role.Customer;
        }
        else if (user.IsInRole(Role.Supplier.ToString()))
        {
            _currentAccountType = Role.Supplier;
        }
        else
        {
            _currentAccountType = null;
        }
    }
}